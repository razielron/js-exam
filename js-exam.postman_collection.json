{
	"info": {
		"_postman_id": "bb1667c2-e4fe-4ee1-b6af-8e1bd0bc8a45",
		"name": "js-exam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create movie1 and user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"movie1 and user1 should be created succesfuly\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes.movie).to.have.ownProperty('id');\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"movie1Id\", jsonRes.movie.id);\r",
							"    pm.environment.set(\"movie1Secret\", jsonRes.movie.secret);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"movieName\": \"movie1\",\r\n    \"email\": \"user1@g.c\",\r\n    \"img\": \"img@l.l\",\r\n    \"userName\": \"user1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "create movie2 for user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"movie2 should be created succesfuly\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes.movie).to.have.ownProperty('id');\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"movie2Id\", jsonRes.movie.id);\r",
							"    pm.environment.set(\"movie2Secret\", jsonRes.movie.secret);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"movieName\": \"movie2\",\r\n    \"email\": \"user1@g.c\",\r\n    \"img\": \"img@l.l\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"all movies should be returned\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes).to.have.ownProperty('g_movies');\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "search for movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"all movies should be returned\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes).to.have.ownProperty('g_movies');\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/movies?movieName=movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"movies"
					],
					"query": [
						{
							"key": "movieName",
							"value": "movie"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create review1 and user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"review1 and user2 should be created succesfuly\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes.review).to.have.ownProperty('id');\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"review2Id\", jsonRes.review.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rank\": 3,\r\n    \"text\": \"this is my review\",\r\n    \"movieId\": \"{{movie1Id}}\",\r\n    \"email\": \"user2@g.c\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/review",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"review"
					]
				}
			},
			"response": []
		},
		{
			"name": "fail to create review2 with more than 1000 letters for user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"review2shouldn't be created - error for more than 1000 letters\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes).to.have.ownProperty('error');\r",
							"    pm.expect(jsonRes.error).to.equal(\"text limit 1000 letters\");\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rank\": 3,\r\n    \"movieId\": \"{{movie2Id}}\",\r\n    \"email\": \"user2@g.c\",\r\n    \"userName\": \"user2\",\r\n    \"text\": \"this is my SECOND review with more than 1000 lettersr\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/review",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"review"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"all reviews should be returned\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes).to.have.ownProperty('g_reviews');\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/reviews",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete movie2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"movie2 should be deleted\", () => {\r",
							"    let jsonRes = pm.response.json();\r",
							"    pm.expect(jsonRes.movie.id).to.equal(pm.environment.get('movie2Id'));\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"user1@g.c\",\r\n    \"secret\": \"{{movie2Secret}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5050/movie/{{movie2Id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5050",
					"path": [
						"movie",
						"{{movie2Id}}"
					]
				}
			},
			"response": []
		}
	]
}